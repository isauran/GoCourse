Title: Урок 8. Дженерики (обобщения) в Go
Author: Перевод команды GoCourse

---

# Что такое дженерики?

Дженерики (generics) позволяют писать функции и структуры, которые работают с разными типами данных. Это удобно для создания универсальных алгоритмов, например, списков, деревьев, очередей.

---

# Зачем нужны дженерики?

- Чтобы не писать один и тот же код для разных типов
- Для создания универсальных структур данных (списки, очереди, деревья)
- Для удобства и безопасности кода

---

# Пример обычной функции

```
func PrintInt(x int) {
    fmt.Println(x)
}
```

---

# Пример дженерик-функции

```
func Print[T any](x T) {
    fmt.Println(x)
}
```

Теперь Print можно вызвать с любым типом!

---

# Ограничения типов (constraints)

Можно ограничить, какие типы разрешены:
```
func Compare[T comparable](a, b T) bool {
    return a == b
}
```

---

# Компиляция и производительность

- Дженерики проверяются на этапе компиляции
- Нет лишних преобразований типов
- Код остаётся быстрым

---

# Пример: универсальный список

```
type List[T any] struct {
    items []T
}
```

---

# Итоги

- Дженерики делают код универсальным и удобным
- Можно писать функции и структуры для любых типов
- Всё проверяется на этапе компиляции

---

# Не бойтесь пробовать!

Экспериментируйте с дженериками — это современный и мощный инструмент Go!
