Урок 11. Маршаллинг и демаршаллинг, файлы конфигурации
Lesson 11
27 Jul 2025
Tags: golang, go

Перевод команды GoCourse
Pavel Tišnovský
Red Hat, Inc.
https://github.com/RedHatOfficial/GoCourse
@RedHat

* Источники
- [[https://github.com/RedHatOfficial/GoCourse]]
.image ./common/qr_address.png

* Gophers
#The Go gopher was designed by Renee French. (http://reneefrench.blogspot.com/)
#Source https://golang.org/doc/gopher/fiveyears.jpg
#The design and this image is licensed under the Creative Commons 3.0 Attributions license.
.image ./common/fiveyears.jpg _ 900



*Что такое сериализация (marshalling)?

Сериализация — это преобразование объекта в формат, который можно сохранить или передать по сети (например, JSON, XML, бинарный формат). Обратный процесс — десериализация (unmarshalling).


*Основные форматы данных

- JSON
- XML
- gob (бинарный формат Go)
- MessagePack, BSON и другие


*Сериализация в Go

- Для сериализации и десериализации используются пакеты `encoding/json`, `encoding/xml`, `encoding/gob` и др.
- Любая структура Go может быть сериализована, если её поля экспортируются (с большой буквы)


*Пример: JSON

```
type User struct {
    Name string
    Age  int
}

b, err := json.Marshal(user)
err = json.Unmarshal(b, &user)
```


*Пример: XML

```
type User struct {
    Name string `xml:"name"`
    Age  int    `xml:"age"`
}

b, err := xml.Marshal(user)
err = xml.Unmarshal(b, &user)
```


*Другие форматы

- MessagePack, BSON — для компактного хранения и передачи данных
- gob — быстрый бинарный формат, встроен в Go


*Итоги

- Go поддерживает разные форматы сериализации "из коробки"
- Можно легко сохранять и читать данные в JSON, XML, gob и других форматах
- Для работы с конфигами часто используют JSON или YAML


*Не бойтесь пробовать!

Экспериментируйте с сериализацией и разными форматами — это полезно для обмена данными между программами!
