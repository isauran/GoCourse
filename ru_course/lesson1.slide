Title: Урок 1. Введение, синтаксис, форматирование, пакеты, типы
Author: Перевод команды GoCourse

---

# Введение

Go — это язык программирования, созданный в Google в 2009 году. Его придумали Роб Пайк, Кен Томпсон и Роберт Гриземер. Go — это простой, быстрый и современный язык, который отлично подходит для новичков.

---

# Для чего нужен Go?

- Создание сайтов и серверов
- Облачные технологии (например, Docker, Kubernetes)
- Быстрые и надёжные программы

---

# Ключевые слова Go

В Go есть специальные слова, которые нельзя использовать для названий переменных:

break, case, chan, const, continue, default, defer, else, fallthrough, for, func, go, goto, if, import, interface, map, package, range, return, select, struct, switch, type, var

---

# Пакеты и импорты

- Программы Go состоят из пакетов (библиотек)
- Чтобы использовать чужой код, его нужно импортировать
- Стандартные пакеты уже есть в Go

---

# Пример: Hello, world!

```
package main
import "fmt"
func main() {
    fmt.Println("Привет, мир!")
}
```

---

# Как запускать программы

1. Скопируйте код в файл, например, `main.go`
2. Откройте терминал и перейдите в папку с этим файлом
3. Введите команду:
```
go run main.go
```

---

# Unicode и поддержка русского языка

Go отлично работает с разными языками, в том числе с русским.

---

# Форматирование кода

Go сам расставляет отступы и пробелы. Для этого есть команда:
```
go fmt имя_файла.go
```

---

# Синтаксис Go

- Похож на C, но проще
- Все объявления пишутся после имени
- Если имя начинается с большой буквы — оно видно из других файлов

---

# Функции

В Go можно возвращать несколько значений из функции:

```
func sumAndDiff(a int, b int) (int, int) {
    return a+b, a-b
}
```

---

# Переменные и типы

- Типы похожи на C
- Нет автоматических преобразований типов
- Есть вывод типа (type inference)
- У каждой переменной есть "нулевое значение" (0, false, "")

---

# Преобразование типов

Чтобы поменять тип, нужно явно указать новый тип:
```
var x int = 5
var y float64 = float64(x)
```

---

# Константы

Константы — это значения, которые нельзя изменить:
```
const Pi = 3.14
```

---

# Циклы

В Go есть только один цикл — for. Он может работать как while:
```
for i := 0; i < 5; i++ {
    fmt.Println(i)
}
```

---

# Условия

```
if x > 0 {
    fmt.Println("x положительный")
} else {
    fmt.Println("x не положительный")
}
```

---

# Switch

Switch — это удобная замена множеству if-else:
```
switch day {
case "понедельник":
    fmt.Println("Начало недели")
default:
    fmt.Println("Другой день")
}
```

---

# Ошибки

В Go есть специальный тип error. Если функция может вернуть ошибку, её нужно обработать:
```
result, err := someFunc()
if err != nil {
    fmt.Println("Произошла ошибка:", err)
}
```

---

# Полезные ссылки

- Тур по Go: https://tour.golang.org/welcome/1
- Документация: https://golang.org/doc/
- Справочник: https://golang.org/pkg/

---

# Не бойтесь ошибок!

Ошибки — это нормально. Учиться на ошибках — лучший способ понять программирование.

---

# Вперёд!

Пробуйте, экспериментируйте, и у вас всё получится!
