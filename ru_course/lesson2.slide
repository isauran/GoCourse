Title: Урок 2. Основы языка Go: часть 1
Author: Перевод команды GoCourse

---

# О чём этот урок?

В этом уроке мы познакомимся с важными понятиями языка Go:
- defer (отложенные действия)
- структуры (struct)
- массивы и срезы
- указатели
- отображения (map)
- цикл range
- свои типы данных

---

# Ключевые слова Go

Go использует специальные слова, которые нельзя использовать для переменных:
break, case, chan, const, continue, default, defer, else, fallthrough, for, func, go, goto, if, import, interface, map, package, range, return, select, struct, switch, type, var

---

# Операторы Go

Go использует знакомые операторы: +, -, *, /, %, ==, !=, <, >, <=, >=, &&, ||, =, := и другие.

---

# defer — отложенные действия

Иногда нужно выполнить какое-то действие в самом конце работы функции (например, закрыть файл). Для этого есть defer:

```
defer fmt.Println("Это будет выведено в самом конце функции")
```

- defer работает по принципу "стека" (последний — первый выполняется)
- параметры для defer вычисляются сразу

---

# Пример defer

```
func main() {
    fmt.Println("Начало")
    defer fmt.Println("Конец")
    fmt.Println("Работаем...")
}
```

---

# Структуры (struct)

Структура — это способ объединить несколько значений в одну переменную:

```
type Person struct {
    Name string
    Age  int
}

p := Person{Name: "Иван", Age: 20}
fmt.Println(p.Name)
```

---

# Массивы и срезы

Массив — это набор элементов одного типа фиксированной длины:
```
var arr [3]int = [3]int{1, 2, 3}
```

Срез — это "гибкий" массив, длина может меняться:
```
s := []int{1, 2, 3}
s = append(s, 4)
```

---

# Указатели

Указатель — это переменная, которая хранит адрес другой переменной:
```
var a int = 5
var p *int = &a
fmt.Println(*p) // 5
```

---

# Отображения (map)

Map — это набор пар "ключ-значение":
```
m := make(map[string]int)
m["один"] = 1
fmt.Println(m["один"])
```

---

# Цикл range

С помощью range можно перебрать элементы массива, среза или map:
```
for i, v := range s {
    fmt.Println(i, v)
}
```

---

# Свои типы данных

Можно создавать свои типы на основе существующих:
```
type MyInt int
```

---

# Итоги

- defer помогает выполнять действия в конце функции
- struct объединяет данные
- массивы и срезы — для хранения данных
- указатели — для работы с адресами
- map — для хранения пар ключ-значение
- range — для перебора элементов
- можно создавать свои типы

---

# Не бойтесь пробовать!

Пробуйте писать код, экспериментируйте — так вы быстрее научитесь программировать!
