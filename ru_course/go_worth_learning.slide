Стоит ли изучать язык Go?
Red Hat
19 Sep 2023
Tags: golang, go

Pavel Tišnovský <ptisnovs@redhat.com>
Red Hat, Inc.



* Введение

Существует множество интересных языков программирования, которые можно изучить.
Вопрос в том, стоит ли совершенствовать их все? Ответ - нет, конечно.

Так что насчет языка Go - стоит ли попробовать?

В этой презентации мы поговорим о плюсах Go (горутины,
каналы, GC, системы типов) и минусах (язык с атрибутами, взятыми из
прошлого века :)



* Gophers
#The Go gopher was designed by Renee French. (http://reneefrench.blogspot.com/)
#Source https://golang.org/doc/gopher/fiveyears.jpg
#The design and this image is licensed under the Creative Commons 3.0 Attributions license.
.image ./common/fiveyears.jpg _ 900



* Введение
- Запущен в ноябре 2009 года Google
- Rob Pike, Ken Thompson, Robert Griesemer
- Более читаемая замена для C/C++/Java/...
- Лучше подходит потребностям корпораций
- „Меньше значит больше"



* Введение
- (статически) компилируемый
- статически типизированный
- позволяет кросс-компиляцию
- с автоматическим управлением памяти
- встроенная конкурентность
- строгие правила форматирования
- вывод типов



* Использование
- серверный веб (PHP, Node.js, Python, Ruby, Java)
- клиентский веб (компиляция в WebAssembly)
- облачные технологии (Docker, Podman, Kubernetes, Kubernetes Operators, MinIO, ...)
- доступен для всех интересных систем
- и большинства архитектур (x86-64, ARMv6, ARMv8, даже s390x и PowerPC64 LE)
- пользовательский бэкенд + cgo


* Более читаемый по сравнению с C/C++

- Эволюционировал от C
- Объявления в постфиксе
- Гораздо быстрее для парсера разбирать исходники
- Экспортируемые символы начинаются с заглавной буквы
- [[https://blog.golang.org/gos-declaration-syntax]]

.code src/syntax_c.go
.code src/syntax_go.go

* Более читаемый по сравнению с C++

- В C++ мы не говорим "Пропущена звездочка"
- мы говорим:

    "error C2664:
    'void std::vector<block,std::alocator<_Ty> >::push_back(const block &)':
    cannot convert argument 1 from
    'std::_Vector_iterator<std::_Vector_val<std::_Simple_types<block> > >'
    to 'block &&'"
    
- и я думаю, это прекрасно
- не мое, источник:
.link https://goo.gl/Akxjih

* Более читаемый по сравнению с C++

    #include <vector>
    #include <algorithm>
    int main()
    {
        int a;
        std::vector< std::vector <int> > v;
        std::vector< std::vector <int> >::const_iterator it = std::find( v.begin(), v.end(), a );
    }

- gcc -c error.cpp выдаст 15786 байт вывода с самой длинной строкой в 330 символов

* Облачные технологии
.link https://www.docker.com/ Docker
.link https://podman.io/ Podman
.link https://kubernetes.io/ Kubernetes
.link https://coreos.com/operators/ Kubernetes Operators
.link https://min.io/ MinIO
.link https://nsq.io/ NSQ
.link https://nats.io/ NATS
.link https://www.redhat.com/en/technologies/cloud-computing/openshift OpenShift
.link https://geth.ethereum.org/ Go Ethereum



* Цели
- простота
- однозначность
- производительность
- прагматичность
- более безопасные приложения (по сравнению с C/C++)
- микросервисы
- простота установки ("DLL hell" не может случиться)
- для DevOps от DevOps
- быстрые (фактически супербыстрые) сборки (CI инструменты это любят ;-)



* Внимание
- Go - это смесь современных подходов в сочетании с довольно старыми идеями
- явная обработка ошибок
- нет дженериков до версии 1.18
- нет ООП на основе классов
- нет `try`/`catch`/`finally`
- нет тернарного оператора
- ключевое слово `goto`
- идентификатор `nil`



* Интерфейсы реализуются автоматически
- "удовлетворяются" в терминологии Go

.image ./images/interface.svg _ 500



* Go против C(++)
- более сильная система типов
- нет макросов текстовой подстановки
- нет заголовочных файлов
- система пакетов + проверки
- более безопасные операции с памятью + GC
- стандартизированный фреймворк для тестов
- более строгие правила (`++`/`--`, указатели, ...)
- нет структур управления обработкой исключений (пока?)
- нет универсальных типов данных до Go 1.18



* Но... мы живем в 21 веке!

.image ./images/ural.jpg _ 700



* Но... мы живем в 21 веке!

- Многоядерные процессоры
- Распределенные системы
- Локальность памяти
- Читаемость



* Многоядерные процессоры
.image ./images/perf.jpg _ 700



* Многоядерные процессоры
.image ./images/Amdahl.png



* Немного истории

- 60-е: недостаточное управление потоком программы
- "GOTO считается вредным"
- решено введением структурного программирования
- -> новый синтаксис

* Немного истории

- 70-е: недостаточное управление состоянием
- решено введением ООП
- -> новый синтаксис

* Немного истории
- 2000: недостаточное управление конкурентностью
- не решено долгое время
- Горутины + каналы Go
- async в Python и JavaScript
- -> новый синтаксис

* Поддержка конкурентности

- Взаимодействующие последовательные процессы (формальный язык и т.д.)
- "Не общайтесь через разделение памяти; разделяйте память через общение"
- Так называемые _горутины_
- Каналы



* Конкурентность и/или параллелизм

- Последовательное: выполняет задачи по порядку с одним ядром процессора
- Конкурентное: выполняет множество задач одновременно с меньшим количеством ядер процессора (или даже 1)
- Параллельное: выполняет n задач одновременно с n ядрами процессора

* Конкурентность

- когда множественные задачи могут выполняться в перекрывающиеся периоды
- нужно только одно ядро процессора
- основная проблема: прерывания

* Параллелизм

- нужно более одного ядра процессора
- основная проблема: изоляция
- вторая проблема: координация

* Решения для конкурентности и параллелизма

- процессы
- потоки
- корутины


* Решения для конкурентности и параллелизма

- процессы
- потоки
- **горутины**
- корутины


* Горутины + каналы - это способ ... Go

- Дедлоки тогда не такая большая проблема
.image ./images/deadlock.gif _ 700



* Локальность памяти

- Настоящие структуры
- Настоящие типы значений
- Нет заголовков объектов
- Java: нет типов значений, нет структур, заголовки объектов


* Локальность памяти

- RAM больше не "Память с произвольным доступом"

* Локальность памяти

.image ./images/computer_latency_1.jpg _ 300


* Локальность памяти и время доступа

- Мы, люди, плохо сравниваем очень малые периоды времени
- То же для других единиц (длина, деньги и т.д.)


* Локальность памяти и время доступа

.image ./images/computer_latency_2.png _ 500


* Go и принцип KISS

* Динамичные команды разработчиков
.image ./images/teams.png _ 500



* Динамичные команды разработчиков
- стабильность
- на уровне исходного кода: если компилируется в версии X, будет компилироваться в версии X+1 тоже
- С другой стороны: https://pythonclock.org/
- читаемость



* go-fmt
- Стиль Gofmt никому не нравится, но gofmt нравится всем. — Rob Pike
- стандартный инструмент



* Хотите быть мейнстримом?
- [[http://pypl.github.io/PYPL.html]]
- [[https://hackernoon.com/10-best-programming-languages-to-learn-in-2019-e5b05af4a972]]
- [[https://insights.dice.com/2018/12/17/5-programming-languages-consider-learning-2019/]]
- [[https://www.rankred.com/new-programming-languages-to-learn/]]



* Популярность
- [[https://insights.stackoverflow.com/survey/2020#technology-most-loved-dreaded-and-wanted-languages-loved]]
- [[https://insights.stackoverflow.com/survey/2020#technology-most-loved-dreaded-and-wanted-languages-dreaded]]
- [[https://insights.stackoverflow.com/survey/2020#technology-most-loved-dreaded-and-wanted-languages-wanted]]



* График популярности
.image ./images/popularity.png  _ 600



* Итак...стоит ли тратить время на изучение Go?
- сети - ДА
- (микро)сервисы - ДА
- масштабируемые системы - ДА
- вам нравятся строгие правила форматирования - ДА
- вам нравятся сильные системы типов - ДА
- вам нравится минимализм - ДА
- довольно быстрая компиляция - ДА
- простейшее развертывание - ДА
- гарантированная совместимость исходного кода - ДА



* Итак...стоит ли тратить время на изучение Go?
- вам нравится классическое (сломанное) ООП на основе классов - НЕТ
- вам нравятся барочные языки - НЕТ, наслаждайтесь C++
- вам нравятся непоследовательные языки - НЕТ, наслаждайтесь Perl
- вам нравятся гомоиконические языки - НЕТ, LISP/Scheme/Clojure лучше тогда
- вы хотите управлять памятью самостоятельно - НЕТ
- вам нравятся переполнения буфера - НЕТ, есть "лучшие" варианты
- вам нравится действительно очень сильная система типов и быстрый язык - Rust



#last slide
* Больше Gophers
#The Go gopher was designed by Renee French. (http://reneefrench.blogspot.com/)
#Source https://golang.org/doc/gopher/bumper.png
#The design and this image is licensed under the Creative Commons 3.0 Attributions license.
.image ./images/bumper.png  _ 900
