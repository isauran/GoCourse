Title: Урок 4. Параллельность (Concurrency) в Go
Author: Перевод команды GoCourse

---

# Что такое параллельность?

Параллельность — это когда несколько задач выполняются одновременно. Даже если у вас один процессор, операционная система создаёт ощущение одновременной работы.

---

# Горутины (goroutines)

Горутина — это очень лёгкий поток (thread) в Go. Их можно запускать тысячи, и это не "тяжело" для компьютера.

Чтобы запустить функцию в отдельной горутине, используйте ключевое слово `go`:

```
go myFunction()
```

---

# Каналы (channels)

Каналы нужны, чтобы горутины могли обмениваться данными.

- Канал создаётся с помощью `make`:
```
c := make(chan int)
```
- Чтобы отправить значение в канал:
```
c <- 5
```
- Чтобы получить значение из канала:
```
x := <-c
```

---

# Буферизированные и небуферизированные каналы

- Обычный (небуферизированный) канал блокирует отправителя и получателя, пока оба не будут готовы.
- Буферизированный канал создаётся так:
```
c := make(chan int, 3)
```
Теперь можно отправить 3 значения, не дожидаясь получения.

---

# Закрытие канала

Канал можно закрыть с помощью `close(c)`. Получатель может узнать, что канал закрыт:

```
value, ok := <-c
if !ok {
    fmt.Println("Канал закрыт")
}
```

---

# Перебор значений из канала

Можно перебирать все значения из канала с помощью цикла:
```
for v := range c {
    fmt.Println(v)
}
```

---

# Оператор select

`select` позволяет ждать сразу несколько каналов:

```
select {
case x := <-c1:
    fmt.Println("Получили из c1:", x)
case y := <-c2:
    fmt.Println("Получили из c2:", y)
default:
    fmt.Println("Нет данных")
}
```

---

# Итоги

- Горутины — простой способ запускать задачи параллельно
- Каналы — для обмена данными между горутинами
- select — для работы с несколькими каналами

---

# Не бойтесь пробовать!

Пробуйте запускать свои горутины и обмениваться данными через каналы — это весело и полезно!
