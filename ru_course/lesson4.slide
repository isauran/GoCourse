Урок 4. Параллельность (Concurrency) в Go
Lesson 4
27 Jul 2025
Tags: golang, go

Перевод команды GoCourse
Stanislav Kozina <skozina@redhat.com>
Red Hat, Inc.
https://github.com/RedHatOfficial/GoCourse

* Источники
- [[https://github.com/RedHatOfficial/GoCourse]]
.image ./common/qr_address.png

* Параллельность
- Определение: вычисления, происходящие одновременно
- Даже на одном процессоре (ядро создаёт это ощущение)

* Коммуникация через очереди сообщений
- Аналогия телефонных звонков
- Звонок телефона: блокирующий вызов
- Автоответчик: неблокирующий вызов (длина плёнки = размер очереди)
- Несколько получателей: call-центр
- Несколько отправителей: конференц-связь

* Потоки и горутины
- Напоминание: потоки разделяют память
- Go-рутины — это легковесные потоки, дешёвые для создания
- Должно быть нормально создавать тысячи горутин
- Внутренне мультиплексируются через пул потоков
- Создаются простым ключевым словом go

* Горутины
.play lesson4/goroutines.go

* Каналы
- Способ передачи данных между горутинами
- Тип данных является частью типа канала
- По умолчанию блокируется при передаче/приёме (но может быть буферизирован)
- Один оператор для отправки и получения из канала
- Создаётся с помощью make()
.code lesson4/chan.go

* Каналы
- Обратите внимание, что это условие гонки.. подробнее об этом позже
.play lesson4/chan2.go

* Каналы
- Небуферизированные каналы действительно блокируются (и golang любезно обнаруживает взаимоблокировку)
.play lesson4/chan3.go

* Буферизированные каналы
- Размер буфера как второй аргумент make()
.play lesson4/chan4.go

* Закрытие каналов
- Каналы можно закрыть с помощью close()
- Читатели могут проверить закрытые каналы, используя необязательный второй возвращаемый аргумент
- Альтернативно читатели могут обнаружить закрытый канал с помощью цикла по range

* Обнаружение закрытого канала с возвращаемым значением
.play lesson4/chan_close.go

* Обнаружение закрытого канала с range
.play lesson4/range.go

* Select на нескольких каналах
- Вы можете ждать на нескольких каналах одновременно, используя select

* Select на нескольких каналах
.play lesson4/select.go

* Паттерн quit + ack
.play lesson4/quit_ack.go /^package main/,/^func main/

* Паттерн quit + ack (продолжение)
.play lesson4/quit_ack.go /^func main/,/^}/

* Выбор по умолчанию
- Действие по умолчанию, если все другие действия заблокированы

* Выбор по умолчанию
.play lesson4/default.go

#last slide
* Больше Gophers
#The Go gopher was designed by Renee French. (http://reneefrench.blogspot.com/)
#Source https://golang.org/doc/gopher/bumper.png
#The design and this image is licensed under the Creative Commons 3.0 Attributions license.
.image ./common/bumper.png  _ 900

Пробуйте запускать свои горутины и обмениваться данными через каналы — это весело и полезно!
