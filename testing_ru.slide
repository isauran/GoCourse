Тестирование в языке Go
Фреймворки тестирования Golang
02 Nov 2019
Tags: golang, go, testing

Pavel Tišnovský
Red Hat, Inc.
ptisnovs@redhat.com
https://github.com/RedHatOfficial/GoCourse
@RedHat



* Sources
- [[https://github.com/RedHatOfficial/GoCourse]]
.image ./common/qr_address.png



* Gophers
#The Go gopher was designed by Renee French. (http://reneefrench.blogspot.com/)
#Source https://golang.org/doc/gopher/fiveyears.jpg
#The design and this image is licensed under the Creative Commons 3.0 Attributions license.
.image ./common/fiveyears.jpg _ 900



* Фреймворки тестирования Golang
- Модульное тестирование
- BDD тестирование
- Expect-подобные фреймворки и библиотеки
- Тестирование REST API
- Анализ производительности



* Пирамида тестов и конус мороженого

[[https://watirmelon.files.wordpress.com/2018/02/automated-testing-pyramid-with-eye.jpg?w=840]]
[[https://watirmelon.files.wordpress.com/2018/02/software-testing-icecream-cone-antipattern.jpg?w=840]]



* Модульное тестирование
- Стандартный пакет `testing`
- Вспомогательный инструмент `go-carpet`
- Расширения (`testify`)
- Альтернативный пакет `oglematchers`
- Комбинация `ogletest` и `oglematchers`
- Пакет `assertions`
- Пакет `goblin`



* Стандартный пакет "testing"
- Основан на пакете [[https://pkg.go.dev/testing]]
- Исходные файлы, содержащие тесты, должны заканчиваться на `_test.go`
- Каждый тест должен быть сохранен в функции с именем `func` `TestXxx(*testing.T)`
- Базовые методы для структуры `testing.T` (тип данных)



* Стандартный пакет "testing"
- В пакете `testing` нет "утверждений"!
- `Log(args` `...interface{})`
- `Skip(args` `...interface{})`
- `Error(args` `...interface{})`
- `Fatal(args` `...interface{})`
- `Fail()`
- `FailNow()`



* Стандартный пакет "testing"
- Форматирование вывода
- `Logf(format` `string,` `args` `...interface{})`
- `Skipf(format` `string,` `args` `...interface{})`
- `Errorf(format` `string,` `args` `...interface{})`
- `Fatalf(format` `string,` `args` `...interface{})`



* Файлы модульных тестов
- Обычно хранятся в `package_test.go`
- Могут быть разделены на столько файлов, сколько необходимо
- Так называемые табличные тесты
- Обычно используется массив/срез структур с входными данными и ожидаемым выводом



* Как запустить модульные тесты
- Базовая команда: `go` `test`
- Обычно: `go` `test` `./...`
- Можно указать регулярное выражение для выбора только подмножества тестов



* Простейший пример

.code testing/testing/tests01/add.go

* Простейший тест

.code testing/testing/tests01/add_test.go

* Запуск тестов и результат

.code testing/testing/tests01/run.txt

* Табличный тест

.code testing/testing/tests02/add_test.go

* Запуск табличного теста

.code testing/testing/tests02/run.txt

* Простейший пример с некорректными данными

.code testing/testing/tests03/add_test.go

* Запуск теста с некорректными данными

.code testing/testing/tests03/run.txt

* Подтесты

.code testing/testing/tests04/add_test.go

* Запуск подтестов

.code testing/testing/tests04/run.txt

* Пропуск тестов

.code testing/testing/tests05/add_test.go

* Запуск с пропуском

.code testing/testing/tests05/run.txt

* Покрытие кода тестами

go test -cover

* Покрытие кода тестами с деталями

go test -cover -coverprofile=coverage.out
go tool cover -html=coverage.out

* Тестирование производительности

- Бенчмарки являются частью стандартных инструментов Go
- Могут комбинироваться с функциями и методами профилирования



#last slide
* Больше Gophers
#The Go gopher was designed by Renee French. (http://reneefrench.blogspot.com/)
#Source https://golang.org/doc/gopher/bumper.png
#The design and this image is licensed under the Creative Commons 3.0 Attributions license.
.image ./common/bumper.png  _ 900
